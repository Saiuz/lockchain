///////////////////////////////////////////////////////////////////////////////
// Account Factory
///////////////////////////////////////////////////////////////////////////////
// Factory To Manage User Blockchain Accounts. These are assumed to be running
// Locally on the Node although all calls are asynchronous.
// Follows standrad angular factory pattern returning an object instance
// of the interface 
///////////////////////////////////////////////////////////////////////////////
// LD042 Advanced Web Engineering
// Andrew Hall 2016
///////////////////////////////////////////////////////////////////////////////
angular.module("LockChain").factory("AccountFactory", function(){
	
	var selectedAccount;
					   
	///////////////////////////////////////////////////////////////////////////
	// Function getAccounts
	///////////////////////////////////////////////////////////////////////////
	// Gets The Initial Set of Accounts Configured On The Node Using 
	// Account Factory As The Data Source. 
	///////////////////////////////////////////////////////////////////////////
	var getAccounts = function(callback){
		return web3.eth.accounts;
	};

	///////////////////////////////////////////////////////////////////////////
	// Function getDefaultAccounts
	///////////////////////////////////////////////////////////////////////////
	// Gets The Initial Set of Accounts Configured On The Node Using 
	// Account Factory As The Data Source. Default account is set as
	// The accounts[0] Coinbase
	///////////////////////////////////////////////////////////////////////////
	var getDefaultAccount = function(callback){
		return web3.eth.coinbase;
	};

	///////////////////////////////////////////////////////////////////////////
	// Function getSelectedAccounts
	///////////////////////////////////////////////////////////////////////////
	// Gets The Initial Set of Accounts Configured On The Node Using 
	// Account Factory As The Data Source. Default account is set as
	// The accounts[0] Coinbase
	///////////////////////////////////////////////////////////////////////////
	var getSelectedAccount = function(){
		return selectedAccount;
	};

	///////////////////////////////////////////////////////////////////////////
	// Function getSelectedAccounts
	///////////////////////////////////////////////////////////////////////////
	// Gets The Initial Set of Accounts Configured On The Node Using 
	// Account Factory As The Data Source. Default account is set as
	// The accounts[0] Coinbase
	///////////////////////////////////////////////////////////////////////////
	var setSelectedAccount = function(account){
		selectedAccount=account;
	};


	///////////////////////////////////////////////////////////////////////////
	// Function getNextDeviceAddress
	///////////////////////////////////////////////////////////////////////////
	// Returns a valid but dummy address for device registration. In 
	// real world we assume that devices will be preregistered and 
	// already have addresses allocated by the manufacturer
	///////////////////////////////////////////////////////////////////////////
	var getNextDeviceAddress = function(){
		return generateDummyAddress();
	};

	
	///////////////////////////////////////////////////////////////////////////
	// Function generateDummyAddress
	///////////////////////////////////////////////////////////////////////////
	// Generate a fake address for devices as bytes40. In the real
	// world we assume that devices will be preregistered and 
	// already have addresses allocated by the manufacturer
	///////////////////////////////////////////////////////////////////////////
	function generateDummyAddress(){
		var x=(Math.random()*100000000000000000).toString();
		var y=(Math.random()*100000000000000000).toString();
		var z=(Math.random()*100000000000000000).toString();
		var concatenated = x+y+z;
		concatenated = concatenated.substring(0,40);
		return "0x" + concatenated
	}

	return{
		getAccounts: getAccounts,
		getDefaultAccount:getDefaultAccount,
		getNextDeviceAddress:getNextDeviceAddress,
		getSelectedAccount:getSelectedAccount,
		setSelectedAccount:setSelectedAccount
	};

});
